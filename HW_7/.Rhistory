library( "rstudioapi" )
library( "dplyr" )
library( "stringr" )
library( "rstan" )
library( "rethinking" )
current_path <- getActiveDocumentContext()$path
library( "loo" )
library( "rethinking" )
# Question 1
# Load data
data( "Hurricanes" )
data <- Hurricanes; rm( Hurricanes )
data[ , 5:6 ] <- sapply( data[ , 5:6 ] , scale)
str( data )
# Create data list for the stan model
model.data <- list(
N = NROW( data ),
D = data$deaths,
C = data$category,
MP = data$min_pressure,
DN = data$damage_norm,
FE = data$female,
FY = data$femininity
)
str( model.data )
# Question 3
stan.model <- "
data{
int<lower=1> N;
int D[N];
real FY[N];
real MP[N];
}
parameters{
real<lower=0> phi;
real a;
real b_FY_MP;
}
model{
vector[N] lamda;
phi ~ cauchy( 0 , 2 );
b_FY_MP ~ uniform( -30 , 30 );
a ~ uniform( -30, 30 );
for ( i in 1:N ) {
lamda[i] = a + b_FY_MP * FY[i] * MP[i];
}
D ~ neg_binomial_2_log( lamda , phi );
}
generated quantities{
vector[N] log_lik;
vector[N] lamda;
for ( i in 1:N ) {
lamda[i] = a + b_FY_MP * FY[i] * MP[i];
log_lik[i] = neg_binomial_2_log_lpmf( D[i] | lamda[i] , phi );
}
}
"
# Fit stan model with model code and model data
fit.stan.3 <- stan( model_code=stan.model , data=model.data ,
chains=4 , cores=4 , iter=2000 )
# Show results
print( fit.stan.3 , probs=c(0.055,0.945) , pars=c("log_lik","lamda","lp__"), include=FALSE )
# Question 3
stan.model <- "
data{
int<lower=1> N;
int D[N];
real FY[N];
real MP[N];
}
parameters{
real<lower=0> phi;
real a;
real b_FY;
real b_FY_MP;
}
model{
vector[N] lamda;
phi ~ cauchy( 0 , 2 );
b_FY_MP ~ uniform( -30 , 30 );
a ~ uniform( -30, 30 );
for ( i in 1:N ) {
lamda[i] = a + b_FY * FY[i] + b_FY_MP * FY[i] * MP[i];
}
D ~ neg_binomial_2_log( lamda , phi );
}
generated quantities{
vector[N] log_lik;
vector[N] lamda;
for ( i in 1:N ) {
lamda[i] = a + b_FY * FY[i] + b_FY_MP * FY[i] * MP[i];
log_lik[i] = neg_binomial_2_log_lpmf( D[i] | lamda[i] , phi );
}
}
"
# Fit stan model with model code and model data
fit.stan.3 <- stan( model_code=stan.model , data=model.data ,
chains=4 , cores=4 , iter=2000 )
# Show results
print( fit.stan.3 , probs=c(0.055,0.945) , pars=c("log_lik","lamda","lp__"), include=FALSE )
# Recreate lamda and simulate it with new data
f_lamda <- function(x) exp(post.3$a + post.3$b_FY_MP * x)
femininity_new <- seq( from=min(data$femininity) , to=max(data$femininity) , length.out=30 )
lamda <-
sapply(femininity_new, f_lamda) %>%
as_tibble() %>%
rename_all(function(x) femininity_new) %>%
mutate(Iter = row_number()) %>%
gather(femininity, deaths, -Iter) %>%
group_by(femininity) %>%
mutate(hpdi_l = quantile(deaths, probs = 0.055),
hpdi_h = quantile(deaths, probs = 0.945)) %>%
mutate(mu = mean(deaths)) %>%
ungroup() %>%
mutate(femininity = as.numeric(femininity))
# Draw posterior
post.3 <- as.data.frame( fit.stan.3 )
# Recreate lamda and simulate it with new data
f_lamda <- function(x) exp(post.3$a + post.3$b_FY_MP * x)
femininity_new <- seq( from=min(data$femininity) , to=max(data$femininity) , length.out=30 )
lamda <-
sapply(femininity_new, f_lamda) %>%
as_tibble() %>%
rename_all(function(x) femininity_new) %>%
mutate(Iter = row_number()) %>%
gather(femininity, deaths, -Iter) %>%
group_by(femininity) %>%
mutate(hpdi_l = quantile(deaths, probs = 0.055),
hpdi_h = quantile(deaths, probs = 0.945)) %>%
mutate(mu = mean(deaths)) %>%
ungroup() %>%
mutate(femininity = as.numeric(femininity))
# Plot raw data and model estimate of lamda
p <- ggplot()
p3 <- p +
geom_point(data = data,
aes(femininity, deaths),
shape = 1, color = 'dodgerblue') +
geom_ribbon(data = lamda,
aes(x = femininity, ymin = hpdi_l, ymax = hpdi_h), alpha = .5) +
geom_line(data = lamda,
aes(x = femininity, y = mu))
# Draw posterior
post.3 <- as.data.frame( fit.stan.3 )
# Recreate lamda and simulate it with new data
f_lamda <- function(x) exp(post.3$a + post.3$b_FY_MP * x)
femininity_new <- seq( from=min(data$femininity) , to=max(data$femininity) , length.out=30 )
lamda <-
sapply(femininity_new, f_lamda) %>%
as_tibble() %>%
rename_all(function(x) femininity_new) %>%
mutate(Iter = row_number()) %>%
gather(femininity, deaths, -Iter) %>%
group_by(femininity) %>%
mutate(hpdi_l = quantile(deaths, probs = 0.055),
hpdi_h = quantile(deaths, probs = 0.945)) %>%
mutate(mu = mean(deaths)) %>%
ungroup() %>%
mutate(femininity = as.numeric(femininity))
# Draw posterior
post.3 <- as.data.frame( fit.stan.3 )
# Recreate lamda and simulate it with new data
f_lamda <- function(x) exp(post.3$a + post.3$b_FY_MP * x)
femininity_new <- seq( from=min(data$femininity) , to=max(data$femininity) , length.out=30 )
lamda <-
sapply(femininity_new, f_lamda) %>%
as_tibble() %>%
rename_all(function(x) femininity_new) %>%
mutate(Iter = row_number()) %>%
gather(femininity, deaths, -Iter) %>%
group_by(femininity) %>%
mutate(hpdi_l = quantile(deaths, probs = 0.055),
hpdi_h = quantile(deaths, probs = 0.945)) %>%
mutate(mu = mean(deaths)) %>%
ungroup() %>%
mutate(femininity = as.numeric(femininity))
?gather
library( "dplyr" )
lamda <-
sapply(femininity_new, f_lamda) %>%
as_tibble() %>%
rename_all(function(x) femininity_new) %>%
mutate(Iter = row_number()) %>%
gather(femininity, deaths, -Iter) %>%
group_by(femininity) %>%
mutate(hpdi_l = quantile(deaths, probs = 0.055),
hpdi_h = quantile(deaths, probs = 0.945)) %>%
mutate(mu = mean(deaths)) %>%
ungroup() %>%
mutate(femininity = as.numeric(femininity))
library( "tidyr" )
?gather
lamda <-
sapply(femininity_new, f_lamda) %>%
as_tibble() %>%
rename_all(function(x) femininity_new) %>%
mutate(Iter = row_number()) %>%
gather(femininity, deaths, -Iter) %>%
group_by(femininity) %>%
mutate(hpdi_l = quantile(deaths, probs = 0.055),
hpdi_h = quantile(deaths, probs = 0.945)) %>%
mutate(mu = mean(deaths)) %>%
ungroup() %>%
mutate(femininity = as.numeric(femininity))
# Plot raw data and model estimate of lamda
p <- ggplot()
p3 <- p +
geom_point(data = data,
aes(femininity, deaths),
shape = 1, color = 'dodgerblue') +
geom_ribbon(data = lamda,
aes(x = femininity, ymin = hpdi_l, ymax = hpdi_h), alpha = .5) +
geom_line(data = lamda,
aes(x = femininity, y = mu))
p3
View(model.data)
View(post.3)
# Traceplot
traceplot( fit.stan.3 , pars=c("log_lik","lamda","lp__"), include=FALSE )
# Show results
print( fit.stan.3 , probs=c(0.055,0.945) , pars=c("log_lik","lamda","lp__"), include=FALSE )
# Show results
print( fit.stan.3 , probs=c(0.055,0.945) , pars=c("log_lik","lamda","lp__"), include=FALSE )
# Question 3
stan.model <- "
data{
int<lower=1> N;
int D[N];
real FY[N];
real MP[N];
}
parameters{
real<lower=0> phi;
real a;
real b_FY_MP;
}
model{
vector[N] lamda;
phi ~ cauchy( 0 , 2 );
b_FY_MP ~ uniform( -30 , 30 );
a ~ uniform( -30, 30 );
for ( i in 1:N ) {
lamda[i] = a + b_FY_MP * FY[i] * MP[i];
}
D ~ neg_binomial_2_log( lamda , phi );
}
generated quantities{
vector[N] log_lik;
vector[N] lamda;
for ( i in 1:N ) {
lamda[i] = a + b_FY_MP * FY[i] * MP[i];
log_lik[i] = neg_binomial_2_log_lpmf( D[i] | lamda[i] , phi );
}
}
"
# Fit stan model with model code and model data
fit.stan.3 <- stan( model_code=stan.model , data=model.data ,
chains=4 , cores=4 , iter=2000 )
# Traceplot
traceplot( fit.stan.3 , pars=c("log_lik","lamda","lp__"), include=FALSE )
# Show results
print( fit.stan.3 , probs=c(0.055,0.945) , pars=c("log_lik","lamda","lp__"), include=FALSE )
# Plot coeftab
plot( fit.stan.3 , pars=c("log_lik","lamda","lp__"), include=FALSE )
stan.model <- "
data{
int<lower=1> N;
int D[N];
real FY[N];
real DN[N];
}
parameters{
real<lower=0> phi;
real a;
real b_FY_DN;
}
model{
vector[N] lamda;
phi ~ cauchy( 0 , 2 );
b_FY_DN ~ uniform( -30 , 30 );
a ~ uniform( -30, 30 );
for ( i in 1:N ) {
lamda[i] = a + b_FY_DN * FY[i] * DN[i];
}
D ~ neg_binomial_2_log( lamda , phi );
}
generated quantities{
vector[N] log_lik;
vector[N] lamda;
for ( i in 1:N ) {
lamda[i] = a + b_FY_DN * FY[i] * DN[i];
log_lik[i] = neg_binomial_2_log_lpmf( D[i] | lamda[i] , phi );
}
}
"
# Fit stan model with model code and model data
fit.stan.4 <- stan( model_code=stan.model , data=model.data ,
chains=4 , cores=4 , iter=2000 )
# Traceplot
traceplot( fit.stan.4 , pars=c("log_lik","lamda","lp__"), include=FALSE )
# Show results
print( fit.stan.4 , probs=c(0.055,0.945) , pars=c("log_lik","lamda","lp__"), include=FALSE )
# Traceplot
traceplot( fit.stan.4 , pars=c("log_lik","lamda","lp__"), include=FALSE )
# Plot coeftab
plot( fit.stan.4 , pars=c("log_lik","lamda","lp__"), include=FALSE )
install.packages("tidybayes")
