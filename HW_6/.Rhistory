# library( "bayesplot" )
# library( "GGally" )
library( "rethinking" )
# Load data
data( "salamanders" )
data <- salamanders; rm( salamanders )
str( data )
head( data , 20 )
data <- data[ complete.cases(data), ]
data <- data[ complete.cases(data$SITE), ]
data <- data[ complete.cases(data$SALAMAN), ]
data <- data[ complete.cases(data$PCTCOVER), ]
data <- data[ complete.cases(data$FORESTAGE), ]
# Create data list for the stan model
data.model <- list(
N = NROW( data ),
salaman = data$SALAMAN,
pct_cover = data$PCTCOVER,
forest_age = data$FORESTAGE,
)
# Load data
data( "salamanders" )
data <- salamanders; rm( salamanders )
str( data )
# Create data list for the stan model
data.model <- list(
N = NROW( data ),
salaman = data$SALAMAN,
pct_cover = data$PCTCOVER,
forest_age = data$FORESTAGE
)
str( data.model )
data("salamanders")
d <- salamanders
f <- alist(
SALAMAN ~ dpois(lambda),
log(lambda) <- alpha + beta_pct_cover*PCTCOVER,
alpha ~ dnorm(0, 10),
beta_pct_cover ~ dnorm(0, 5)
)
m10H4.map <- map(f, data = d)
m10H4.stan <- map2stan(f, data = d, warmup = 1e3, iter = 3e3, chains = 2)
# compare models
precis(m10H4.map)
precis(m10H4.stan)
# plot model predictions
pctcover.seq <- seq(from=0,to=100,length.out=30)
lambda <- link(m10H4.stan, data = list(PCTCOVER = pctcover.seq))
lambda.mean <- apply(X = lambda, MARGIN = 2, FUN = mean)
lambda.PI <- apply(X = lambda, MARGIN = 2, FUN = PI)
counts <- sim(m10H4.stan, data = list(PCTCOVER = pctcover.seq))
counts.mean <- apply(X = counts, MARGIN = 2, FUN = mean)
counts.PI <- apply(X = counts, MARGIN = 2, FUN = PI)
plot(SALAMAN ~ PCTCOVER, data = d)
lines(pctcover.seq, lambda.mean)
shade(lambda.PI, pctcover.seq)
shade(counts.PI, pctcover.seq)
stancode(m10H4.stan)
str( data )
# Create data list for the stan model
data.model <- list(
N = NROW( data ),
salaman = data$SALAMAN,
pct_cover = data$PCTCOVER,
forest_age = data$FORESTAGE
)
str( data.model )
# Model code
model.a.stan <- "
data{
int<lower=1> N;
int salaman[N];
int pct_cover[N];
}
parameters{
real a;
real b_pct_cover;
}
model{
vector[N] lamda;
b_pct_cover ~ uniform( -15 , 15 );
a ~ uniform( -30, 30 );
for ( i in 1:N ) {
lamda[i] = a + b_pct_cover * pct_cover[i];
lamda[i] = exp( lamda[i] );
}
salaman ~ poisson( lamda );
}
generated quantities{
vector[N] log_lik;
vector[N] lamda;
for ( i in 1:N ) {
lamda[i] = a + b_pct_cover * pct_cover[i];
lamda[i] = exp( lamda[i] );
log_lik[i] = binomial_lpmf( y[i] | n[i] , p[i] );
}
}
"
# Model code
model.stan <- "
data{
int<lower=1> N;
int salaman[N];
int pct_cover[N];
}
parameters{
real a;
real b_pct_cover;
}
model{
vector[N] lamda;
b_pct_cover ~ uniform( -15 , 15 );
a ~ uniform( -30, 30 );
for ( i in 1:N ) {
lamda[i] = a + b_pct_cover * pct_cover[i];
lamda[i] = exp( lamda[i] );
}
salaman ~ poisson( lamda );
}
generated quantities{
vector[N] log_lik;
vector[N] lamda;
for ( i in 1:N ) {
lamda[i] = a + b_pct_cover * pct_cover[i];
lamda[i] = exp( lamda[i] );
log_lik[i] = binomial_lpmf( y[i] | n[i] , p[i] );
}
}
"
# Fit stan model with model code and model data
fit.a.stan <- stan( model_code=model.stan , data=data.model ,
chains=4 , cores=4 , iter=1000 )
# Model code
model.stan <- "
data{
int<lower=1> N;
int salaman[N];
int pct_cover[N];
}
parameters{
real a;
real b_pct_cover;
}
model{
vector[N] lamda;
b_pct_cover ~ uniform( -15 , 15 );
a ~ uniform( -30, 30 );
for ( i in 1:N ) {
lamda[i] = a + b_pct_cover * pct_cover[i];
lamda[i] = exp( lamda[i] );
}
salaman ~ poisson( lamda );
}
generated quantities{
vector[N] log_lik;
vector[N] lamda;
for ( i in 1:N ) {
lamda[i] = a + b_pct_cover * pct_cover[i];
lamda[i] = exp( lamda[i] );
log_lik[i] = poisson_lpmf( salaman[i] | lamda[i] );
}
}
"
# Fit stan model with model code and model data
fit.a.stan <- stan( model_code=model.stan , data=data.model ,
chains=4 , cores=4 , iter=1000 )
# Show results
print( fit.a.stan , probs=c(0.055,0.945) )
# Show results
print( fit.a.stan , probs=c(0.055,0.945) , pars=c("a","b_pct_cover") )
precis(m10H4.stan)
rm(fit.a.stan)
# Fit stan model with model code and model data
fit.stan <- stan( model_code=model.stan , data=data.model ,
chains=4 , cores=4 , iter=1000 )
# Show results
print( fit.stan , probs=c(0.055,0.945) , pars=c("a","b_pct_cover") )
# Plot coeftab
plot( fit.stan , pars=c("a","b_pct_cover") )
# Paits plot
pairs( fit.stan , pars=c("a","b_pct_cover") )
?mcmc_trace
View(fit.stan)
head(as.data.frame(fit.stan))
# The predicted probability of success and the 89% interval for each row of data is as follows:
p <- as.data.frame(fit.stan)[,50:96]
p.mean <- apply( p , 2 , mean )
p.PI <- apply( p, 2, PI , prob=0.89 )
# (c)
model.stan <- "
data{
int<lower=1> N;
int salaman[N];
int pct_cover[N];
int forest_age[N];
}
parameters{
real a;
real b_pct_cover;
real b_forest_age;
real b_interaction;
}
model{
vector[N] lamda;
b_interaction ~ uniform( -15 , 15 );
b_forest_age ~ uniform( -15 , 15 );
b_pct_cover ~ uniform( -15 , 15 );
a ~ uniform( -30, 30 );
for ( i in 1:N ) {
lamda[i] = a + b_pct_cover * pct_cover[i] + b_forest_age * forest_age[i] + b_interaction * pct_cover[i] * forest_age[i];
lamda[i] = exp( lamda[i] );
}
salaman ~ poisson( lamda );
}
generated quantities{
vector[N] log_lik;
vector[N] lamda;
for ( i in 1:N ) {
lamda[i] = a + b_pct_cover * pct_cover[i] + b_forest_age * forest_age[i] + b_interaction * pct_cover[i] * forest_age[i];
lamda[i] = exp( lamda[i] );
log_lik[i] = poisson_lpmf( salaman[i] | lamda[i] );
}
}
"
fit.stan.2 <- stan( model_code=model.stan , data=data.model ,
chains=4 , cores=4 , iter=1000 )
fit.stan.2 <- stan( model_code=model.stan , data=data.model ,
chains=4 , cores=4 , iter=1000 )
print( fit.stan.2 , probs=c(0.055,0.945) , pars=c("a","b_pct_cover") )
plot( fit.stan.2 , pars=c("a","b_pct_cover") )
# Pairs plot
pairs( fit.stan.2 , pars=c("a","bP","bA","bV","bPA") )
# Pairs plot
pairs( fit.stan.2 , pars=c("a","b_pct_cover") )
print( fit.stan.2 , probs=c(0.055,0.945) , pars=c("a","b_pct_cover","b_forest_age","b_interaction") )
plot( fit.stan.2 , pars=c("a","b_pct_cover","b_forest_age","b_interaction") )
# Pairs plot
pairs( fit.stan.2 , pars=c("a","b_pct_cover","b_forest_age","b_interaction") )
View(data)
# Compute WAIC for both stan models
ll.stan.1 <- extract_log_lik(fit.stan, merge_chains=FALSE)
# library( "MASS" )
# library( "dplyr" )
library( "loo" )
# Compute WAIC for both stan models
ll.stan.1 <- extract_log_lik(fit.stan, merge_chains=FALSE)
reff.stan.1 <- relative_eff(exp(ll.stan.1))
waic.stan.1 <- waic(ll.stan.1, r_eff=reff.a.stan, cores=4)
ll.stan.2 <- extract_log_lik(fit.stan.2, merge_chains=FALSE)
reff.stan.2 <- relative_eff(exp(ll.stan.2))
waic.stan.2 <- waic(ll.stan.2, r_eff=reff.c.stan, cores=4)
# Compare WAICs
loo::compare(waic.a.stan, waic.c.stan)
# Compare WAICs
loo::compare(waic.stan.1, waic.stan.2)
plot(SALAMAN ~ PCTCOVER, data = d)
plot(SALAMAN ~ PCTCOVER, data = data)
# Traceplot
extract_post <- rstan::extract( fit.stan , inc_warmup=TRUE , permuted=FALSE)
post_traceplot <- mcmc_trace( extract_post , n_warmup=0 , pars=c("a","bP","bA","bV"),
facet_args=list( nrow=2 , labeller=label_parsed ) )
post_traceplot <- mcmc_trace( extract_post , n_warmup=0 , pars=c("a","b_pct_cover") ,
facet_args=list( nrow=2 , labeller=label_parsed ) )
library( "bayesplot" )
post_traceplot <- mcmc_trace( extract_post , n_warmup=0 , pars=c("a","b_pct_cover") ,
facet_args=list( nrow=2 , labeller=label_parsed ) )
post_traceplot
# Traceplot
extract_post <- rstan::extract( fit.stan.2 , inc_warmup=TRUE , permuted=FALSE)
post_traceplot <- mcmc_trace( extract_post , n_warmup=0 , pars=c("a","b_pct_cover","b_forest_age","b_interaction"),
facet_args=list( nrow=2 , labeller=label_parsed ) )
post_traceplot
library( "loo" )
library( "bayesplot" )
library( "rethinking" )
# Load data
data( "salamanders" )
data <- salamanders; rm( salamanders )
str( data )
# Create data list for the stan model
data.model <- list(
N = NROW( data ),
salaman = data$SALAMAN,
pct_cover = data$PCTCOVER,
forest_age = data$FORESTAGE
)
str( data.model )
# Model code
model.stan <- "
data{
int<lower=1> N;
int salaman[N];
int pct_cover[N];
}
parameters{
real a;
real b_pct_cover;
}
model{
vector[N] lamda;
b_pct_cover ~ uniform( -15 , 15 );
a ~ uniform( -30, 30 );
for ( i in 1:N ) {
lamda[i] = a + b_pct_cover * pct_cover[i];
lamda[i] = exp( lamda[i] );
}
salaman ~ poisson( lamda );
}
generated quantities{
vector[N] log_lik;
vector[N] lamda;
for ( i in 1:N ) {
lamda[i] = a + b_pct_cover * pct_cover[i];
lamda[i] = exp( lamda[i] );
log_lik[i] = poisson_lpmf( salaman[i] | lamda[i] );
}
}
"
# Fit stan model with model code and model data
fit.stan.1 <- stan( model_code=model.stan , data=data.model ,
chains=4 , cores=4 , iter=1000 )
# Show results
print( fit.stan.1 , probs=c(0.055,0.945) , pars=c("a","b_pct_cover") )
# Plot coeftab
plot( fit.stan.1 , pars=c("a","b_pct_cover") )
# Paits plot
pairs( fit.stan , pars=c("a","b_pct_cover") )
# Traceplot
extract_post <- rstan::extract( fit.stan.1 , inc_warmup=TRUE , permuted=FALSE)
post_traceplot <- mcmc_trace( extract_post , n_warmup=0 , pars=c("a","b_pct_cover") ,
facet_args=list( nrow=2 , labeller=label_parsed ) )
post_traceplot
plot(SALAMAN ~ PCTCOVER, data=data)
# The predicted probability of success and the 89% interval for each row of data is as follows:
p <- as.data.frame(fit.stan)[,50:96]
p.mean <- apply( p , 2 , mean )
#plot( data$prob_success , col=50 , ylab="probability of success" , xlab="each case of data (P.A.V)" , xlim=c(0,9) , ylim=c(0,1) , pch=16 , xaxt="n" )
#axis( 1 , at=1:8 , labels=c("L.A.L","L.A.S","L.I.L","L.I.S","S.A.L","S.A.S","S.I.L","S.I.S") )
points( PCTCOVER , p.mean , data=data)
View(data)
#plot( data$prob_success , col=50 , ylab="probability of success" , xlab="each case of data (P.A.V)" , xlim=c(0,9) , ylim=c(0,1) , pch=16 , xaxt="n" )
#axis( 1 , at=1:8 , labels=c("L.A.L","L.A.S","L.I.L","L.I.S","S.A.L","S.A.S","S.I.L","S.I.S") )
points(1:47 , p.mean)
#data$prob_success <- data$y / data$n
plot(SALAMAN ~ PCTCOVER, data=data)
#plot( data$prob_success , col=50 , ylab="probability of success" , xlab="each case of data (P.A.V)" , xlim=c(0,9) , ylim=c(0,1) , pch=16 , xaxt="n" )
#axis( 1 , at=1:8 , labels=c("L.A.L","L.A.S","L.I.L","L.I.S","S.A.L","S.A.S","S.I.L","S.I.S") )
points(data$PCTCOVER , p.mean)
for ( i in data$PCTCOVER ) lines( c(i, i), p.PI[,i] )
p.PI <- apply( p, 2, PI , prob=0.89 )
for ( i in data$PCTCOVER ) lines( c(i, i), p.PI[,i] )
for ( i in 1:47 ) lines( c(data$PCTCOVER[i], data$PCTCOVER[i]), p.PI[,i] )
