str(d)
#df <- d %>% mutate(district=as.factor(district), urban=as.factor(urban))
#df %>%
#    group_by(district,urban) %>%
#    summarise(avg_use=mean(use.contraception)) %>%
#    ggplot(aes(district, avg_use, color=urban)) + geom_point()
#df %>% ggplot(aes(as.factor(use.contraception), living.children, fill=urban, color=urban)) + geom_jitter()
d$district_id <- as.integer(as.factor(d$district))
d$use_contraception <- d$use.contraception
d$age_centered <- d$age.centered
d <- select(d,-use.contraception, -age.centered, -district)
m12h1.d.fixed <- map2stan(
alist(
use_contraception ~ dbinom(1, p),
logit(p) <- a_district[district_id],
a_district[district_id] ~ dnorm(0, 5)
),
data=d
)
precis(m12h1.d.fixed, depth=2)
m12h1.d.pooled <- map2stan(
alist(
use_contraception ~ dbinom(1, p),
logit(p) <- a_district[district_id] ,
a_district[district_id] ~ dnorm(a, sigma),
a ~ dnorm(0,5) ,
sigma ~ dcauchy(0,1)
),
data=d
)
precis(m12h1.d.pooled, depth=2)
compare(m12h1.d.fixed, m12h1.d.pooled)
cacl_district_rate_estimate <- function(model, model_name, district_data){
sf <- extract.samples(model)
sf$a_district <- logistic(sf$a_district)
d1 <- data.frame(district_data)
d1$rate <- apply(sf$a_district, 2, mean)
pi <- apply(sf$a_district, 2, PI)
d1$rate_low <- pi[1,]
d1$rate_high <- pi[2,]
d1$model <- model_name
d1
}
d.res <- d %>%
group_by(district_id) %>%
summarise(
cnt=n(),
ttl_use_c=sum(use_contraception),
rate=ttl_use_c/cnt
) %>%
as.data.frame() %>%
mutate(
d_label = reorder(as.factor(paste0(district_id,'/n=',cnt)), cnt)
) %>%
arrange(district_id)
d1 <- cacl_district_rate_estimate(m12h1.d.fixed, 'fixed', d.res)
d2 <- cacl_district_rate_estimate(m12h1.d.pooled, 'pooled', d.res)
d.res.models <- bind_rows(d1,d2)
d.res <- arrange(d.res, cnt) %>% mutate(cnt_sorted_id=1:nrow(d.res))
pd <- position_dodge(0.3)
d.res.models %>%
ggplot(aes(d_label, rate, color=model, fill=model)) +
geom_point(data=d.res, size=3, aes(fill='raw', color='raw')) +
geom_point(size=2, position = pd) +
geom_errorbar(aes(ymin=rate_low, ymax=rate_high), position = pd) +
geom_hline(yintercept = mean(d$use_contraception), linetype='longdash')  +
geom_hline(yintercept = mean(d.res$rate), linetype='dotdash' ) +
theme(axis.text.x = element_text(angle = 90))
grid.arrange(p7, p8, nrow = 2)
p8 <- p +
geom_point(data = data.con.rate,
aes(district_id, rate),
shape = 1, color = 'dodgerblue') +
scale_x_countinuous(breaks = district_id) +
theme(axis.text.x = element_text(angle = 90)) +
geom_point(data = p_mean,
aes(district_id, mu),
shape = 1, color = 'red') +
geom_segment(data = p_PI,
aes(x = district_id, y = hpdi_l, xend = district_id, yend = hpdi_h), alpha = .5) +
ggtitle("Prediction (Multilevel model)")
p8 <- p +
geom_point(data = data.con.rate,
aes(district_id, rate),
shape = 1, color = 'dodgerblue') +
scale_x_continuous(breaks = district_id) +
theme(axis.text.x = element_text(angle = 90)) +
geom_point(data = p_mean,
aes(district_id, mu),
shape = 1, color = 'red') +
geom_segment(data = p_PI,
aes(x = district_id, y = hpdi_l, xend = district_id, yend = hpdi_h), alpha = .5) +
ggtitle("Prediction (Multilevel model)")
p8
# Calculate contraception use rate of original data
data.con.rate <- data %>%
group_by(district_id) %>%
summarise(
count=n(),
total_use_contraception=sum(use.contraception),
rate=total_use_contraception/count
) %>%
as.data.frame() %>%
mutate(
x_label = reorder(as.factor(paste0(district_id,'||n=',count)), count)
)
# Plot raw data and model estimate of lamda
p <- ggplot()
p8 <- p +
geom_point(data = data.con.rate,
aes(district_id, rate),
shape = 1, color = 'dodgerblue') +
scale_x_continuous(breaks = x_label) +
theme(axis.text.x = element_text(angle = 90)) +
geom_point(data = p_mean,
aes(district_id, mu),
shape = 1, color = 'red') +
geom_segment(data = p_PI,
aes(x = district_id, y = hpdi_l, xend = district_id, yend = hpdi_h), alpha = .5) +
ggtitle("Prediction (Multilevel model)")
p8 <- p +
geom_point(data = data.con.rate,
aes(district_id, rate),
shape = 1, color = 'dodgerblue') +
scale_x_continuous(data = data.con.rate, breaks = x_label) +
theme(axis.text.x = element_text(angle = 90)) +
geom_point(data = p_mean,
aes(district_id, mu),
shape = 1, color = 'red') +
geom_segment(data = p_PI,
aes(x = district_id, y = hpdi_l, xend = district_id, yend = hpdi_h), alpha = .5) +
ggtitle("Prediction (Multilevel model)")
# Calculate contraception use rate of original data
data.con.rate <- data %>%
group_by(district_id) %>%
summarise(
count=n(),
total_use_contraception=sum(use.contraception),
rate=total_use_contraception/count
) %>%
as.data.frame() %>%
mutate(
x_label = reorder(as.factor(paste0(district_id,'||n=',count)), count)
)
data.con.rate
# Calculate contraception use rate of original data
data.con.rate <- data %>%
group_by(district_id) %>%
summarise(
count=n(),
total_use_contraception=sum(use.contraception),
rate=total_use_contraception/count
) %>%
as.data.frame() %>%
mutate(
x_label = reorder(as.factor(paste0('ID=',district_id,'|n=',count)), count)
)
data.con.rate
# Plot raw data and model estimate of lamda
p <- ggplot()
p8 <- p +
geom_point(data = data.con.rate,
aes(district_id, rate),
shape = 1, color = 'dodgerblue') +
scale_x_continuous(breaks = data.con.rate$x_label) +
theme(axis.text.x = element_text(angle = 90)) +
geom_point(data = p_mean,
aes(district_id, mu),
shape = 1, color = 'red') +
geom_segment(data = p_PI,
aes(x = district_id, y = hpdi_l, xend = district_id, yend = hpdi_h), alpha = .5) +
ggtitle("Prediction (Multilevel model)")
p8
p8 <- p +
geom_point(data = data.con.rate,
aes(district_id, rate),
shape = 1, color = 'dodgerblue') +
scale_x_continuous(breaks = x_label) +
theme(axis.text.x = element_text(angle = 90)) +
geom_point(data = p_mean,
aes(district_id, mu),
shape = 1, color = 'red') +
geom_segment(data = p_PI,
aes(x = district_id, y = hpdi_l, xend = district_id, yend = hpdi_h), alpha = .5) +
ggtitle("Prediction (Multilevel model)")
p8 <- p +
geom_point(data = data.con.rate,
aes(district_id, rate),
shape = 1, color = 'dodgerblue') +
scale_x_date(breaks = data.con.rate$x_label) +
theme(axis.text.x = element_text(angle = 90)) +
geom_point(data = p_mean,
aes(district_id, mu),
shape = 1, color = 'red') +
geom_segment(data = p_PI,
aes(x = district_id, y = hpdi_l, xend = district_id, yend = hpdi_h), alpha = .5) +
ggtitle("Prediction (Multilevel model)")
p8
p8 <- p +
geom_point(data = data.con.rate,
aes(district_id, rate),
shape = 1, color = 'dodgerblue') +
scale_x_continuous(breaks = x_label) +
theme(axis.text.x = element_text(angle = 90)) +
geom_point(data = p_mean,
aes(district_id, mu),
shape = 1, color = 'red') +
geom_segment(data = p_PI,
aes(x = district_id, y = hpdi_l, xend = district_id, yend = hpdi_h), alpha = .5) +
ggtitle("Prediction (Multilevel model)")
data.con.rate
p8 <- p +
geom_point(data = data.con.rate,
aes(district_id, rate),
shape = 1, color = 'dodgerblue') +
scale_x_continuous(breaks = data.con.rate$x_label) +
theme(axis.text.x = element_text(angle = 90)) +
geom_point(data = p_mean,
aes(district_id, mu),
shape = 1, color = 'red') +
geom_segment(data = p_PI,
aes(x = district_id, y = hpdi_l, xend = district_id, yend = hpdi_h), alpha = .5) +
ggtitle("Prediction (Multilevel model)")
grid.arrange(p7, p8, nrow = 2)
p8 <- p +
geom_point(data = data.con.rate,
aes(district_id, rate),
shape = 1, color = 'dodgerblue') +
geom_point(data = p_mean,
aes(district_id, mu),
shape = 1, color = 'red') +
geom_segment(data = p_PI,
aes(x = district_id, y = hpdi_l, xend = district_id, yend = hpdi_h), alpha = .5) +
ggtitle("Prediction (Multilevel model)")
grid.arrange(p7, p8, nrow = 2)
p8 <- p +
geom_point(data = data.con.rate,
aes(district_id, rate),
shape = 1, color = 'dodgerblue') +
scale_x_discrete(limits = data.con.rate$x_label) +
theme(axis.text.x = element_text(angle = 90)) +
geom_point(data = p_mean,
aes(district_id, mu),
shape = 1, color = 'red') +
geom_segment(data = p_PI,
aes(x = district_id, y = hpdi_l, xend = district_id, yend = hpdi_h), alpha = .5) +
ggtitle("Prediction (Multilevel model)")
grid.arrange(p7, p8, nrow = 2)
# Calculate contraception use rate of original data
data.con.rate <- data %>%
group_by(district_id) %>%
summarise(
count=n(),
total_use_contraception=sum(use.contraception),
rate=total_use_contraception/count
) %>%
as.data.frame() %>%
mutate(
x_label = reorder(as.factor(paste0('Id=',district_id,'//n=',count)), count)
)
# Draw posterior
post.7 <- as.data.frame( fit.stan.7 )[,1:60]
p_mean <- as.data.frame( logistic( apply( post.7 , 2 , mean ) ) )
colnames(p_mean) <- c("mu")
p_mean$district_id <- seq( from=1 , to=60 )
p_mean <- as.data.frame( p_mean )
p_PI <- t( as.data.frame( logistic(apply( post.7 , 2, PI , prob=0.89 ) ) ) )
district_id <- seq( from=1 , to=60 )
p_PI <- cbind( p_PI , newColumn=district_id )
colnames(p_PI) <- c("hpdi_l","hpdi_h","district_id")
p_PI <- as.data.frame( p_PI )
# Plot raw data and model estimate of lamda
p <- ggplot()
p7 <- p +
geom_point(data = data.con.rate,
aes(district_id, rate),
shape = 1, color = 'dodgerblue') +
scale_x_discrete(limits = data.con.rate$x_label) +
theme(axis.text.x = element_text(angle = 90)) +
geom_point(data = p_mean,
aes(district_id, mu),
shape = 1, color = 'red') +
geom_segment(data = p_PI,
aes(x = district_id, y = hpdi_l, xend = district_id, yend = hpdi_h), alpha = .5) +
ggtitle("Prediction (Traditional fixed-effects model)")
# Draw posterior
post.8 <- as.data.frame( fit.stan.8 )[,1:60]
p_mean <- as.data.frame( logistic( apply( post.8 , 2 , mean ) ) )
colnames(p_mean) <- c("mu")
p_mean$district_id <- seq( from=1 , to=60 )
p_mean <- as.data.frame( p_mean )
p_PI <- t( as.data.frame( logistic(apply( post.8 , 2, PI , prob=0.89 ) ) ) )
district_id <- seq( from=1 , to=60 )
p_PI <- cbind( p_PI , newColumn=district_id )
colnames(p_PI) <- c("hpdi_l","hpdi_h","district_id")
p_PI <- as.data.frame( p_PI )
# Plot raw data and model estimate of lamda
p <- ggplot()
p8 <- p +
geom_point(data = data.con.rate,
aes(district_id, rate),
shape = 1, color = 'dodgerblue') +
scale_x_discrete(limits = data.con.rate$x_label) +
theme(axis.text.x = element_text(angle = 90)) +
geom_point(data = p_mean,
aes(district_id, mu),
shape = 1, color = 'red') +
geom_segment(data = p_PI,
aes(x = district_id, y = hpdi_l, xend = district_id, yend = hpdi_h), alpha = .5) +
ggtitle("Prediction (Multilevel model)")
grid.arrange(p7, p8, nrow = 2)
d.res.models %>%
ggplot(aes(d_label, rate, color=model, fill=model)) +
geom_point(data=d.res, size=3, aes(fill='raw', color='raw')) +
geom_point(size=2, position = pd) +
geom_errorbar(aes(ymin=rate_low, ymax=rate_high), position = pd) +
geom_hline(yintercept = mean(d$use_contraception), linetype='longdash')  +
geom_hline(yintercept = mean(d.res$rate), linetype='dotdash' ) +
theme(axis.text.x = element_text(angle = 90))
grid.arrange(p7, p8, nrow = 2)
library(rethinking)
data(foxes)
data <- foxes
# standardize variables
data$W <- scale( data$weight )
data$A <- scale( data$area )
data$G <- scale( data$groupsize )
data$AF <- scale( data$avgfood )
# Question 1
# Model body weight as a linear function of area
model.1.1 <- ulam(
alist(
W ~ dnorm( mu, sigma ),
mu <- a + bA*A,
a ~ dnorm( 0, 0.2 ),
bA ~ dnorm( 0, 0.5 ),
sigma ~ dexp( 1 )
),
data=data, chains=4 , cores=4 , iter=1000, log_lik = TRUE )
stancode(model.1.1)
licence()
contributors()
# Packages
suppressMessages( library( "rstudioapi" ) )
suppressMessages( library( "dplyr" ) )
suppressMessages( library( "tidyr" ) )
suppressMessages( library( "gridExtra" ) )
suppressMessages( library( "stringr" ) )
suppressMessages( library( "loo" ) )
suppressMessages( library( "rstan" ) )
suppressMessages( library( "rethinking" ) )
# Working directory
current_path <- getActiveDocumentContext()$path
setwd( dirname( current_path ) )
getwd()
# Stan config
rstan_options(auto_write=TRUE)
options(mc.cores=parallel::detectCores())
# Calculate WAIC and compare models
fit.1 <- readRDS(file = "fit_1_ll.rds")
fit.2 <- readRDS(file = "fit_2_ll.rds")
fit.3 <- readRDS(file = "fit_3_ll.rds")
# Data
data <- read.csv( "./panel_rent_new.csv" , header=TRUE )
data_2 <- read.csv( "./panel_return_new.csv" , header=TRUE )
data$StationIndex <- as.integer(as.factor(data$Station))
data$HourIndex <- as.integer(as.factor(str_sub(data$ObsTime,12,13)))
data$Return <- data_2$Return; rm( data_2 )
data$NetReturn <- data$Return - data$Rent
head(data)
scaled_data <- data
scaled_data[ , c(4:8,11:12) ] <- sapply( scaled_data[ , c(4:8,11:12) ], scale)
head(scaled_data)
model.data <- list(
N = NROW( scaled_data ),
Rent = scaled_data$Rent,
Return = scaled_data$Return,
NetReturn = scaled_data$NetReturn,
T = scaled_data$Temperature,
P = scaled_data$Precp,
Min = scaled_data$MinDisMRT,
Num = scaled_data$NumMRT,
S = data$StationIndex,
H = data$HourIndex
)
str( model.data )
post.3 <- as.data.frame( fit.3 )
post.3 <- as.data.frame( fit.3 )
post.3 <- as.data.frame( fit.3 )[,1:57]
post.3[1,57]
post.3[,57]
post.3 <- as.data.frame( fit.3 )[,1:57]
unscale_NR <- function(x) x * sd(data$NetReturn) + mean(data$NetReturn)
post.3 <- as.data.frame( fit.3 )[,1:57]
unscale_NR <- function(x) x * sd(data$NetReturn) + mean(data$NetReturn)
post.1[,station] + post.1[,31+hour]
post.3[,station] + post.3[,31+hour]
post.3 <- as.data.frame( fit.3 )[,1:57]
unscale_NR <- function(x) x * sd(data$NetReturn) + mean(data$NetReturn)
pred_func <- function(station, hour){
post.3[,station] + post.3[,31+hour]
}
unscale_NR <- function(x) x * sd(data$NetReturn) + mean(data$NetReturn)
pred_func <- function(station, hour){
post.3[,station] + post.3[,31+hour]
}
station <- seq( from=1 , to=31 )
each_hour_prediction <- 0
hour <- 8
prediction_by_hour <-
sapply(station, pred_func, hour=hour) %>%
as_tibble() %>%
rename_all(function(x) station) %>%
mutate(Iter = row_number()) %>%
gather(Station, NetReturn, -Iter) %>%
group_by(Station) %>%
mutate(hpdi_l = quantile(NetReturn, probs = 0.055),
hpdi_h = quantile(NetReturn, probs = 0.945)) %>%
mutate(mu = mean(NetReturn)) %>%
mutate(Hour = hour) %>%
ungroup() %>%
mutate(Station = as.numeric(Station)) %>%
select (-c(Iter,NetReturn))
prediction_by_hour <- prediction_by_hour[match(unique(prediction_by_hour$Station), prediction_by_hour$Station),]
View(prediction_by_hour)
prediction_by_hour[ , 2:4 ] <- sapply( prediction_by_hour[ , 2:4 ] , unscale_NR )
for ( i in 1:24 ){
hour <- i
prediction_by_hour <-
sapply(station, pred_func, hour=hour, tempa=0, precp=0) %>%
as_tibble() %>%
rename_all(function(x) station) %>%
mutate(Iter = row_number()) %>%
gather(Station, NetReturn, -Iter) %>%
group_by(Station) %>%
mutate(hpdi_l = quantile(NetReturn, probs = 0.055),
hpdi_h = quantile(NetReturn, probs = 0.945)) %>%
mutate(mu = mean(NetReturn)) %>%
mutate(Hour = hour) %>%
ungroup() %>%
mutate(Station = as.numeric(Station)) %>%
select (-c(Iter,NetReturn))
prediction_by_hour <- prediction_by_hour[match(unique(prediction_by_hour$Station), prediction_by_hour$Station),]
prediction_by_hour[ , 2:4 ] <- sapply( prediction_by_hour[ , 2:4 ] , unscale_NR )
if (!is.data.frame(each_hour_prediction)){
each_hour_prediction <- prediction_by_hour
} else {
each_hour_prediction <- rbind( each_hour_prediction , prediction_by_hour )
}
}
prediction_by_hour <-
sapply(station, pred_func, hour=hour) %>%
as_tibble() %>%
rename_all(function(x) station) %>%
mutate(Iter = row_number()) %>%
gather(Station, NetReturn, -Iter) %>%
group_by(Station) %>%
mutate(hpdi_l = quantile(NetReturn, probs = 0.055),
hpdi_h = quantile(NetReturn, probs = 0.945)) %>%
mutate(mu = mean(NetReturn)) %>%
mutate(Hour = hour) %>%
ungroup() %>%
mutate(Station = as.numeric(Station)) %>%
select (-c(Iter,NetReturn))
prediction_by_hour <- prediction_by_hour[match(unique(prediction_by_hour$Station), prediction_by_hour$Station),]
each_hour_prediction <- 0
for ( i in 1:24 ){
hour <- i
prediction_by_hour <-
sapply(station, pred_func, hour=hour) %>%
as_tibble() %>%
rename_all(function(x) station) %>%
mutate(Iter = row_number()) %>%
gather(Station, NetReturn, -Iter) %>%
group_by(Station) %>%
mutate(hpdi_l = quantile(NetReturn, probs = 0.055),
hpdi_h = quantile(NetReturn, probs = 0.945)) %>%
mutate(mu = mean(NetReturn)) %>%
mutate(Hour = hour) %>%
ungroup() %>%
mutate(Station = as.numeric(Station)) %>%
select (-c(Iter,NetReturn))
prediction_by_hour <- prediction_by_hour[match(unique(prediction_by_hour$Station), prediction_by_hour$Station),]
prediction_by_hour[ , 2:4 ] <- sapply( prediction_by_hour[ , 2:4 ] , unscale_NR )
if (!is.data.frame(each_hour_prediction)){
each_hour_prediction <- prediction_by_hour
} else {
each_hour_prediction <- rbind( each_hour_prediction , prediction_by_hour )
}
}
each_hour_prediction$StationName <- unique(data$Station)
p_m3_8 <- ggplot() +
geom_point(data = plot_data,
aes(Station, mu),
shape = 1, color = 'dodgerblue') +
scale_x_discrete(limits = plot_data$Station) +
geom_segment(data = plot_data,
aes(x = Station, y = hpdi_l, xend = Station, yend = hpdi_h), alpha = .5) +
geom_hline(yintercept = 0 , color = "red") +
ggtitle("Prediction of NetReturn for each station (Hour=8, temperatur & precipitaion at mean)")
# Plot status of each station at hour=8, with temperature and precp at mean
plot_data <- each_hour_prediction[ (each_hour_prediction$Hour==8) , ]
p_m3_8 <- ggplot() +
geom_point(data = plot_data,
aes(Station, mu),
shape = 1, color = 'dodgerblue') +
scale_x_discrete(limits = plot_data$Station) +
geom_segment(data = plot_data,
aes(x = Station, y = hpdi_l, xend = Station, yend = hpdi_h), alpha = .5) +
geom_hline(yintercept = 0 , color = "red") +
ggtitle("Prediction of NetReturn for each station (Hour=8, temperatur & precipitaion at mean)")
p_m3_8
